// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/link-fizz-api/models"
	mock "github.com/stretchr/testify/mock"
)

// LogoutRepositoryMock is an autogenerated mock type for the LogoutRepository type
type LogoutRepositoryMock struct {
	mock.Mock
}

type LogoutRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *LogoutRepositoryMock) EXPECT() *LogoutRepositoryMock_Expecter {
	return &LogoutRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateLogout provides a mock function with given fields: ctx, logout
func (_m *LogoutRepositoryMock) CreateLogout(ctx context.Context, logout *models.Logout) error {
	ret := _m.Called(ctx, logout)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Logout) error); ok {
		r0 = rf(ctx, logout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogoutRepositoryMock_CreateLogout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLogout'
type LogoutRepositoryMock_CreateLogout_Call struct {
	*mock.Call
}

// CreateLogout is a helper method to define mock.On call
//   - ctx context.Context
//   - logout *models.Logout
func (_e *LogoutRepositoryMock_Expecter) CreateLogout(ctx interface{}, logout interface{}) *LogoutRepositoryMock_CreateLogout_Call {
	return &LogoutRepositoryMock_CreateLogout_Call{Call: _e.mock.On("CreateLogout", ctx, logout)}
}

func (_c *LogoutRepositoryMock_CreateLogout_Call) Run(run func(ctx context.Context, logout *models.Logout)) *LogoutRepositoryMock_CreateLogout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Logout))
	})
	return _c
}

func (_c *LogoutRepositoryMock_CreateLogout_Call) Return(_a0 error) *LogoutRepositoryMock_CreateLogout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogoutRepositoryMock_CreateLogout_Call) RunAndReturn(run func(context.Context, *models.Logout) error) *LogoutRepositoryMock_CreateLogout_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogoutByToken provides a mock function with given fields: ctx, token
func (_m *LogoutRepositoryMock) GetLogoutByToken(ctx context.Context, token string) (*models.Logout, error) {
	ret := _m.Called(ctx, token)

	if len(ret) == 0 {
		panic("no return value specified for GetLogoutByToken")
	}

	var r0 *models.Logout
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.Logout, error)); ok {
		return rf(ctx, token)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Logout); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Logout)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogoutRepositoryMock_GetLogoutByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogoutByToken'
type LogoutRepositoryMock_GetLogoutByToken_Call struct {
	*mock.Call
}

// GetLogoutByToken is a helper method to define mock.On call
//   - ctx context.Context
//   - token string
func (_e *LogoutRepositoryMock_Expecter) GetLogoutByToken(ctx interface{}, token interface{}) *LogoutRepositoryMock_GetLogoutByToken_Call {
	return &LogoutRepositoryMock_GetLogoutByToken_Call{Call: _e.mock.On("GetLogoutByToken", ctx, token)}
}

func (_c *LogoutRepositoryMock_GetLogoutByToken_Call) Run(run func(ctx context.Context, token string)) *LogoutRepositoryMock_GetLogoutByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *LogoutRepositoryMock_GetLogoutByToken_Call) Return(_a0 *models.Logout, _a1 error) *LogoutRepositoryMock_GetLogoutByToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogoutRepositoryMock_GetLogoutByToken_Call) RunAndReturn(run func(context.Context, string) (*models.Logout, error)) *LogoutRepositoryMock_GetLogoutByToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogoutRepositoryMock creates a new instance of LogoutRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogoutRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogoutRepositoryMock {
	mock := &LogoutRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
