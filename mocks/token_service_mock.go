// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/link-fizz-api/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// TokenServiceMock is an autogenerated mock type for the TokenService type
type TokenServiceMock struct {
	mock.Mock
}

type TokenServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *TokenServiceMock) EXPECT() *TokenServiceMock_Expecter {
	return &TokenServiceMock_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: ctx, userID, sessionID, iat, exp
func (_m *TokenServiceMock) GenerateToken(ctx context.Context, userID string, sessionID string, iat time.Time, exp time.Time) (string, error) {
	ret := _m.Called(ctx, userID, sessionID, iat, exp)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) (string, error)); ok {
		return rf(ctx, userID, sessionID, iat, exp)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, time.Time) string); ok {
		r0 = rf(ctx, userID, sessionID, iat, exp)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, sessionID, iat, exp)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenServiceMock_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type TokenServiceMock_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - sessionID string
//   - iat time.Time
//   - exp time.Time
func (_e *TokenServiceMock_Expecter) GenerateToken(ctx interface{}, userID interface{}, sessionID interface{}, iat interface{}, exp interface{}) *TokenServiceMock_GenerateToken_Call {
	return &TokenServiceMock_GenerateToken_Call{Call: _e.mock.On("GenerateToken", ctx, userID, sessionID, iat, exp)}
}

func (_c *TokenServiceMock_GenerateToken_Call) Run(run func(ctx context.Context, userID string, sessionID string, iat time.Time, exp time.Time)) *TokenServiceMock_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Time), args[4].(time.Time))
	})
	return _c
}

func (_c *TokenServiceMock_GenerateToken_Call) Return(_a0 string, _a1 error) *TokenServiceMock_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenServiceMock_GenerateToken_Call) RunAndReturn(run func(context.Context, string, string, time.Time, time.Time) (string, error)) *TokenServiceMock_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: ctx, tokenString
func (_m *TokenServiceMock) ValidateToken(ctx context.Context, tokenString string) (*models.TokenClaims, error) {
	ret := _m.Called(ctx, tokenString)

	if len(ret) == 0 {
		panic("no return value specified for ValidateToken")
	}

	var r0 *models.TokenClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TokenClaims, error)); ok {
		return rf(ctx, tokenString)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TokenClaims); ok {
		r0 = rf(ctx, tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TokenClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TokenServiceMock_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type TokenServiceMock_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
func (_e *TokenServiceMock_Expecter) ValidateToken(ctx interface{}, tokenString interface{}) *TokenServiceMock_ValidateToken_Call {
	return &TokenServiceMock_ValidateToken_Call{Call: _e.mock.On("ValidateToken", ctx, tokenString)}
}

func (_c *TokenServiceMock_ValidateToken_Call) Run(run func(ctx context.Context, tokenString string)) *TokenServiceMock_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TokenServiceMock_ValidateToken_Call) Return(_a0 *models.TokenClaims, _a1 error) *TokenServiceMock_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TokenServiceMock_ValidateToken_Call) RunAndReturn(run func(context.Context, string) (*models.TokenClaims, error)) *TokenServiceMock_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewTokenServiceMock creates a new instance of TokenServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenServiceMock {
	mock := &TokenServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
