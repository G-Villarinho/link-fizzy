// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SecurityServiceMock is an autogenerated mock type for the SecurityService type
type SecurityServiceMock struct {
	mock.Mock
}

type SecurityServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SecurityServiceMock) EXPECT() *SecurityServiceMock_Expecter {
	return &SecurityServiceMock_Expecter{mock: &_m.Mock}
}

// HashPassword provides a mock function with given fields: ctx, password
func (_m *SecurityServiceMock) HashPassword(ctx context.Context, password string) (string, error) {
	ret := _m.Called(ctx, password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SecurityServiceMock_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type SecurityServiceMock_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - password string
func (_e *SecurityServiceMock_Expecter) HashPassword(ctx interface{}, password interface{}) *SecurityServiceMock_HashPassword_Call {
	return &SecurityServiceMock_HashPassword_Call{Call: _e.mock.On("HashPassword", ctx, password)}
}

func (_c *SecurityServiceMock_HashPassword_Call) Run(run func(ctx context.Context, password string)) *SecurityServiceMock_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SecurityServiceMock_HashPassword_Call) Return(_a0 string, _a1 error) *SecurityServiceMock_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SecurityServiceMock_HashPassword_Call) RunAndReturn(run func(context.Context, string) (string, error)) *SecurityServiceMock_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPassword provides a mock function with given fields: ctx, hashedPassword, password
func (_m *SecurityServiceMock) VerifyPassword(ctx context.Context, hashedPassword string, password string) error {
	ret := _m.Called(ctx, hashedPassword, password)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, hashedPassword, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SecurityServiceMock_VerifyPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPassword'
type SecurityServiceMock_VerifyPassword_Call struct {
	*mock.Call
}

// VerifyPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - hashedPassword string
//   - password string
func (_e *SecurityServiceMock_Expecter) VerifyPassword(ctx interface{}, hashedPassword interface{}, password interface{}) *SecurityServiceMock_VerifyPassword_Call {
	return &SecurityServiceMock_VerifyPassword_Call{Call: _e.mock.On("VerifyPassword", ctx, hashedPassword, password)}
}

func (_c *SecurityServiceMock_VerifyPassword_Call) Run(run func(ctx context.Context, hashedPassword string, password string)) *SecurityServiceMock_VerifyPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *SecurityServiceMock_VerifyPassword_Call) Return(_a0 error) *SecurityServiceMock_VerifyPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SecurityServiceMock_VerifyPassword_Call) RunAndReturn(run func(context.Context, string, string) error) *SecurityServiceMock_VerifyPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewSecurityServiceMock creates a new instance of SecurityServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecurityServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecurityServiceMock {
	mock := &SecurityServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
