// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/link-fizz-api/models"
	mock "github.com/stretchr/testify/mock"
)

// SessionRepositoryMock is an autogenerated mock type for the SessionRepository type
type SessionRepositoryMock struct {
	mock.Mock
}

type SessionRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRepositoryMock) EXPECT() *SessionRepositoryMock_Expecter {
	return &SessionRepositoryMock_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, session
func (_m *SessionRepositoryMock) CreateSession(ctx context.Context, session *models.Session) error {
	ret := _m.Called(ctx, session)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionRepositoryMock_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - session *models.Session
func (_e *SessionRepositoryMock_Expecter) CreateSession(ctx interface{}, session interface{}) *SessionRepositoryMock_CreateSession_Call {
	return &SessionRepositoryMock_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, session)}
}

func (_c *SessionRepositoryMock_CreateSession_Call) Run(run func(ctx context.Context, session *models.Session)) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*models.Session))
	})
	return _c
}

func (_c *SessionRepositoryMock_CreateSession_Call) Return(_a0 error) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_CreateSession_Call) RunAndReturn(run func(context.Context, *models.Session) error) *SessionRepositoryMock_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *SessionRepositoryMock) DeleteSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRepositoryMock_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionRepositoryMock_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *SessionRepositoryMock_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *SessionRepositoryMock_DeleteSession_Call {
	return &SessionRepositoryMock_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *SessionRepositoryMock_DeleteSession_Call) Run(run func(ctx context.Context, sessionID string)) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionRepositoryMock_DeleteSession_Call) Return(_a0 error) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionRepositoryMock_DeleteSession_Call) RunAndReturn(run func(context.Context, string) error) *SessionRepositoryMock_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionRepositoryMock creates a new instance of SessionRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionRepositoryMock {
	mock := &SessionRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
