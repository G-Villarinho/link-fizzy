// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RedirectServiceMock is an autogenerated mock type for the RedirectService type
type RedirectServiceMock struct {
	mock.Mock
}

type RedirectServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *RedirectServiceMock) EXPECT() *RedirectServiceMock_Expecter {
	return &RedirectServiceMock_Expecter{mock: &_m.Mock}
}

// GetOriginalURLWithTracking provides a mock function with given fields: ctx, linkShortCode, userAgent, ipAddress
func (_m *RedirectServiceMock) GetOriginalURLWithTracking(ctx context.Context, linkShortCode string, userAgent string, ipAddress string) (string, error) {
	ret := _m.Called(ctx, linkShortCode, userAgent, ipAddress)

	if len(ret) == 0 {
		panic("no return value specified for GetOriginalURLWithTracking")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, linkShortCode, userAgent, ipAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, linkShortCode, userAgent, ipAddress)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, linkShortCode, userAgent, ipAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedirectServiceMock_GetOriginalURLWithTracking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOriginalURLWithTracking'
type RedirectServiceMock_GetOriginalURLWithTracking_Call struct {
	*mock.Call
}

// GetOriginalURLWithTracking is a helper method to define mock.On call
//   - ctx context.Context
//   - linkShortCode string
//   - userAgent string
//   - ipAddress string
func (_e *RedirectServiceMock_Expecter) GetOriginalURLWithTracking(ctx interface{}, linkShortCode interface{}, userAgent interface{}, ipAddress interface{}) *RedirectServiceMock_GetOriginalURLWithTracking_Call {
	return &RedirectServiceMock_GetOriginalURLWithTracking_Call{Call: _e.mock.On("GetOriginalURLWithTracking", ctx, linkShortCode, userAgent, ipAddress)}
}

func (_c *RedirectServiceMock_GetOriginalURLWithTracking_Call) Run(run func(ctx context.Context, linkShortCode string, userAgent string, ipAddress string)) *RedirectServiceMock_GetOriginalURLWithTracking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *RedirectServiceMock_GetOriginalURLWithTracking_Call) Return(_a0 string, _a1 error) *RedirectServiceMock_GetOriginalURLWithTracking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RedirectServiceMock_GetOriginalURLWithTracking_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *RedirectServiceMock_GetOriginalURLWithTracking_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedirectServiceMock creates a new instance of RedirectServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedirectServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedirectServiceMock {
	mock := &RedirectServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
