// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/g-villarinho/link-fizz-api/models"
	mock "github.com/stretchr/testify/mock"
)

// UserServiceMock is an autogenerated mock type for the UserService type
type UserServiceMock struct {
	mock.Mock
}

type UserServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserServiceMock) EXPECT() *UserServiceMock_Expecter {
	return &UserServiceMock_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, name, email, password
func (_m *UserServiceMock) CreateUser(ctx context.Context, name string, email string, password string) (string, error) {
	ret := _m.Called(ctx, name, email, password)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, name, email, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, name, email, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type UserServiceMock_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - email string
//   - password string
func (_e *UserServiceMock_Expecter) CreateUser(ctx interface{}, name interface{}, email interface{}, password interface{}) *UserServiceMock_CreateUser_Call {
	return &UserServiceMock_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, name, email, password)}
}

func (_c *UserServiceMock_CreateUser_Call) Run(run func(ctx context.Context, name string, email string, password string)) *UserServiceMock_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserServiceMock_CreateUser_Call) Return(_a0 string, _a1 error) *UserServiceMock_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_CreateUser_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *UserServiceMock_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, ID, token
func (_m *UserServiceMock) DeleteUser(ctx context.Context, ID string, token string) error {
	ret := _m.Called(ctx, ID, token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, ID, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserServiceMock_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type UserServiceMock_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - token string
func (_e *UserServiceMock_Expecter) DeleteUser(ctx interface{}, ID interface{}, token interface{}) *UserServiceMock_DeleteUser_Call {
	return &UserServiceMock_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, ID, token)}
}

func (_c *UserServiceMock_DeleteUser_Call) Run(run func(ctx context.Context, ID string, token string)) *UserServiceMock_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserServiceMock_DeleteUser_Call) Return(_a0 error) *UserServiceMock_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserServiceMock_DeleteUser_Call) RunAndReturn(run func(context.Context, string, string) error) *UserServiceMock_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserServiceMock) GetUserByEmail(ctx context.Context, email string) (*models.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type UserServiceMock_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *UserServiceMock_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *UserServiceMock_GetUserByEmail_Call {
	return &UserServiceMock_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *UserServiceMock_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *UserServiceMock_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserServiceMock_GetUserByEmail_Call) Return(_a0 *models.User, _a1 error) *UserServiceMock_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_GetUserByEmail_Call) RunAndReturn(run func(context.Context, string) (*models.User, error)) *UserServiceMock_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *UserServiceMock) GetUserByID(ctx context.Context, ID string) (*models.UserResponse, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.UserResponse, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.UserResponse); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserServiceMock_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserServiceMock_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
func (_e *UserServiceMock_Expecter) GetUserByID(ctx interface{}, ID interface{}) *UserServiceMock_GetUserByID_Call {
	return &UserServiceMock_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *UserServiceMock_GetUserByID_Call) Run(run func(ctx context.Context, ID string)) *UserServiceMock_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserServiceMock_GetUserByID_Call) Return(_a0 *models.UserResponse, _a1 error) *UserServiceMock_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserServiceMock_GetUserByID_Call) RunAndReturn(run func(context.Context, string) (*models.UserResponse, error)) *UserServiceMock_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, ID, name, email
func (_m *UserServiceMock) UpdateUser(ctx context.Context, ID string, name string, email string) error {
	ret := _m.Called(ctx, ID, name, email)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, ID, name, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserServiceMock_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserServiceMock_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - ID string
//   - name string
//   - email string
func (_e *UserServiceMock_Expecter) UpdateUser(ctx interface{}, ID interface{}, name interface{}, email interface{}) *UserServiceMock_UpdateUser_Call {
	return &UserServiceMock_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, ID, name, email)}
}

func (_c *UserServiceMock_UpdateUser_Call) Run(run func(ctx context.Context, ID string, name string, email string)) *UserServiceMock_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *UserServiceMock_UpdateUser_Call) Return(_a0 error) *UserServiceMock_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserServiceMock_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, string) error) *UserServiceMock_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserServiceMock creates a new instance of UserServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceMock {
	mock := &UserServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
