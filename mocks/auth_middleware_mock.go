// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// AuthMiddlewareMock is an autogenerated mock type for the AuthMiddleware type
type AuthMiddlewareMock struct {
	mock.Mock
}

type AuthMiddlewareMock_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthMiddlewareMock) EXPECT() *AuthMiddlewareMock_Expecter {
	return &AuthMiddlewareMock_Expecter{mock: &_m.Mock}
}

// Authenticate provides a mock function with given fields: next
func (_m *AuthMiddlewareMock) Authenticate(next http.Handler) http.Handler {
	ret := _m.Called(next)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func(http.Handler) http.Handler); ok {
		r0 = rf(next)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// AuthMiddlewareMock_Authenticate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Authenticate'
type AuthMiddlewareMock_Authenticate_Call struct {
	*mock.Call
}

// Authenticate is a helper method to define mock.On call
//   - next http.Handler
func (_e *AuthMiddlewareMock_Expecter) Authenticate(next interface{}) *AuthMiddlewareMock_Authenticate_Call {
	return &AuthMiddlewareMock_Authenticate_Call{Call: _e.mock.On("Authenticate", next)}
}

func (_c *AuthMiddlewareMock_Authenticate_Call) Run(run func(next http.Handler)) *AuthMiddlewareMock_Authenticate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.Handler))
	})
	return _c
}

func (_c *AuthMiddlewareMock_Authenticate_Call) Return(_a0 http.Handler) *AuthMiddlewareMock_Authenticate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthMiddlewareMock_Authenticate_Call) RunAndReturn(run func(http.Handler) http.Handler) *AuthMiddlewareMock_Authenticate_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthMiddlewareMock creates a new instance of AuthMiddlewareMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthMiddlewareMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthMiddlewareMock {
	mock := &AuthMiddlewareMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
