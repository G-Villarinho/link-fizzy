// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SessionServiceMock is an autogenerated mock type for the SessionService type
type SessionServiceMock struct {
	mock.Mock
}

type SessionServiceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionServiceMock) EXPECT() *SessionServiceMock_Expecter {
	return &SessionServiceMock_Expecter{mock: &_m.Mock}
}

// CreateSession provides a mock function with given fields: ctx, userID, IPAddress, userAgent
func (_m *SessionServiceMock) CreateSession(ctx context.Context, userID string, IPAddress string, userAgent string) (string, error) {
	ret := _m.Called(ctx, userID, IPAddress, userAgent)

	if len(ret) == 0 {
		panic("no return value specified for CreateSession")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (string, error)); ok {
		return rf(ctx, userID, IPAddress, userAgent)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, userID, IPAddress, userAgent)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, userID, IPAddress, userAgent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionServiceMock_CreateSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSession'
type SessionServiceMock_CreateSession_Call struct {
	*mock.Call
}

// CreateSession is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - IPAddress string
//   - userAgent string
func (_e *SessionServiceMock_Expecter) CreateSession(ctx interface{}, userID interface{}, IPAddress interface{}, userAgent interface{}) *SessionServiceMock_CreateSession_Call {
	return &SessionServiceMock_CreateSession_Call{Call: _e.mock.On("CreateSession", ctx, userID, IPAddress, userAgent)}
}

func (_c *SessionServiceMock_CreateSession_Call) Run(run func(ctx context.Context, userID string, IPAddress string, userAgent string)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) Return(_a0 string, _a1 error) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SessionServiceMock_CreateSession_Call) RunAndReturn(run func(context.Context, string, string, string) (string, error)) *SessionServiceMock_CreateSession_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteSession provides a mock function with given fields: ctx, sessionID
func (_m *SessionServiceMock) DeleteSession(ctx context.Context, sessionID string) error {
	ret := _m.Called(ctx, sessionID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionServiceMock_DeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteSession'
type SessionServiceMock_DeleteSession_Call struct {
	*mock.Call
}

// DeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - sessionID string
func (_e *SessionServiceMock_Expecter) DeleteSession(ctx interface{}, sessionID interface{}) *SessionServiceMock_DeleteSession_Call {
	return &SessionServiceMock_DeleteSession_Call{Call: _e.mock.On("DeleteSession", ctx, sessionID)}
}

func (_c *SessionServiceMock_DeleteSession_Call) Run(run func(ctx context.Context, sessionID string)) *SessionServiceMock_DeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *SessionServiceMock_DeleteSession_Call) Return(_a0 error) *SessionServiceMock_DeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SessionServiceMock_DeleteSession_Call) RunAndReturn(run func(context.Context, string) error) *SessionServiceMock_DeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// NewSessionServiceMock creates a new instance of SessionServiceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSessionServiceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SessionServiceMock {
	mock := &SessionServiceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
